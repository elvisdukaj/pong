module;

#include <volk.h>

export module vis.graphic.vulkan.vkh:types;

import std;

export namespace vkh {

template <typename FlagBitsType> struct FlagTraits {
  // using wrapped_type = std::underlying_type_t<FlagBitsType>;
  static constexpr bool is_bitmask = false;
};

template <typename T>
concept BitTypeConcept = FlagTraits<T>::is_bitmask;

enum class Result {
  Success = VK_SUCCESS,
  NotReady = VK_NOT_READY,
  Timeout = VK_TIMEOUT,
  EventSet = VK_EVENT_SET,
  EventReset = VK_EVENT_RESET,
  Incomplete = VK_INCOMPLETE,
  ErrorOutOfHostMemory = VK_ERROR_OUT_OF_HOST_MEMORY,
  ErrorOutOfDeviceMemory = VK_ERROR_OUT_OF_DEVICE_MEMORY,
  ErrorInitializationFailed = VK_ERROR_INITIALIZATION_FAILED,
  ErrorDeviceLost = VK_ERROR_DEVICE_LOST,
  ErrorMemoryMapFailed = VK_ERROR_MEMORY_MAP_FAILED,
  ErrorLayerNotPresent = VK_ERROR_LAYER_NOT_PRESENT,
  ErrorExtensionNotPresent = VK_ERROR_EXTENSION_NOT_PRESENT,
  ErrorFeatureNotPresent = VK_ERROR_FEATURE_NOT_PRESENT,
  ErrorIncompatibleDriver = VK_ERROR_INCOMPATIBLE_DRIVER,
  ErrorTooManyObjects = VK_ERROR_TOO_MANY_OBJECTS,
  ErrorFormatNotSupported = VK_ERROR_FORMAT_NOT_SUPPORTED,
  ErrorFragmentedPool = VK_ERROR_FRAGMENTED_POOL,
  ErrorUnknown = VK_ERROR_UNKNOWN,
  ErrorOutOfPoolMemory = VK_ERROR_OUT_OF_POOL_MEMORY,
  ErrorOutOfPoolMemoryKHR = VK_ERROR_OUT_OF_POOL_MEMORY_KHR,
  ErrorInvalidExternalHandle = VK_ERROR_INVALID_EXTERNAL_HANDLE,
  ErrorInvalidExternalHandleKHR = VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR,
  ErrorFragmentation = VK_ERROR_FRAGMENTATION,
  ErrorFragmentationEXT = VK_ERROR_FRAGMENTATION_EXT,
  ErrorInvalidOpaqueCaptureAddress = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
  ErrorInvalidDeviceAddressEXT = VK_ERROR_INVALID_DEVICE_ADDRESS_EXT,
  ErrorInvalidOpaqueCaptureAddressKHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR,
  PipelineCompileRequired = VK_PIPELINE_COMPILE_REQUIRED,
  ErrorPipelineCompileRequiredEXT = VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT,
  PipelineCompileRequiredEXT = VK_PIPELINE_COMPILE_REQUIRED_EXT,
  ErrorSurfaceLostKHR = VK_ERROR_SURFACE_LOST_KHR,
  ErrorNativeWindowInUseKHR = VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,
  SuboptimalKHR = VK_SUBOPTIMAL_KHR,
  ErrorOutOfDateKHR = VK_ERROR_OUT_OF_DATE_KHR,
  ErrorIncompatibleDisplayKHR = VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,
  ErrorValidationFailedEXT = VK_ERROR_VALIDATION_FAILED_EXT,
  ErrorInvalidShaderNV = VK_ERROR_INVALID_SHADER_NV,
  ErrorImageUsageNotSupportedKHR = VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR,
  ErrorVideoPictureLayoutNotSupportedKHR = VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,
  ErrorVideoProfileOperationNotSupportedKHR = VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,
  ErrorVideoProfileFormatNotSupportedKHR = VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,
  ErrorVideoProfileCodecNotSupportedKHR = VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR,
  ErrorVideoStdVersionNotSupportedKHR = VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR,
  ErrorInvalidDrmFormatModifierPlaneLayoutEXT = VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT,
  ErrorNotPermittedKHR = VK_ERROR_NOT_PERMITTED_KHR,
  ErrorNotPermittedEXT = VK_ERROR_NOT_PERMITTED_EXT,
#if defined(VK_USE_PLATFORM_WIN32_KHR)
  ErrorFullScreenExclusiveModeLostEXT = VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT,
#endif /*VK_USE_PLATFORM_WIN32_KHR*/
  ThreadIdleKHR = VK_THREAD_IDLE_KHR,
  ThreadDoneKHR = VK_THREAD_DONE_KHR,
  OperationDeferredKHR = VK_OPERATION_DEFERRED_KHR,
  OperationNotDeferredKHR = VK_OPERATION_NOT_DEFERRED_KHR,
  ErrorInvalidVideoStdParametersKHR = VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR,
  ErrorCompressionExhaustedEXT = VK_ERROR_COMPRESSION_EXHAUSTED_EXT,
  IncompatibleShaderBinaryEXT = VK_INCOMPATIBLE_SHADER_BINARY_EXT,
  ErrorIncompatibleShaderBinaryEXT = VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT,
  PipelineBinaryMissingKHR = VK_PIPELINE_BINARY_MISSING_KHR,
  ErrorNotEnoughSpaceKHR = VK_ERROR_NOT_ENOUGH_SPACE_KHR
};

enum class Format {
  Undefined = VK_FORMAT_UNDEFINED,
  R4G4UnormPack8 = VK_FORMAT_R4G4_UNORM_PACK8,
  R4G4B4A4UnormPack16 = VK_FORMAT_R4G4B4A4_UNORM_PACK16,
  B4G4R4A4UnormPack16 = VK_FORMAT_B4G4R4A4_UNORM_PACK16,
  R5G6B5UnormPack16 = VK_FORMAT_R5G6B5_UNORM_PACK16,
  B5G6R5UnormPack16 = VK_FORMAT_B5G6R5_UNORM_PACK16,
  R5G5B5A1UnormPack16 = VK_FORMAT_R5G5B5A1_UNORM_PACK16,
  B5G5R5A1UnormPack16 = VK_FORMAT_B5G5R5A1_UNORM_PACK16,
  A1R5G5B5UnormPack16 = VK_FORMAT_A1R5G5B5_UNORM_PACK16,
  R8Unorm = VK_FORMAT_R8_UNORM,
  R8Snorm = VK_FORMAT_R8_SNORM,
  R8Uscaled = VK_FORMAT_R8_USCALED,
  R8Sscaled = VK_FORMAT_R8_SSCALED,
  R8Uint = VK_FORMAT_R8_UINT,
  R8Sint = VK_FORMAT_R8_SINT,
  R8Srgb = VK_FORMAT_R8_SRGB,
  R8G8Unorm = VK_FORMAT_R8G8_UNORM,
  R8G8Snorm = VK_FORMAT_R8G8_SNORM,
  R8G8Uscaled = VK_FORMAT_R8G8_USCALED,
  R8G8Sscaled = VK_FORMAT_R8G8_SSCALED,
  R8G8Uint = VK_FORMAT_R8G8_UINT,
  R8G8Sint = VK_FORMAT_R8G8_SINT,
  R8G8Srgb = VK_FORMAT_R8G8_SRGB,
  R8G8B8Unorm = VK_FORMAT_R8G8B8_UNORM,
  R8G8B8Snorm = VK_FORMAT_R8G8B8_SNORM,
  R8G8B8Uscaled = VK_FORMAT_R8G8B8_USCALED,
  R8G8B8Sscaled = VK_FORMAT_R8G8B8_SSCALED,
  R8G8B8Uint = VK_FORMAT_R8G8B8_UINT,
  R8G8B8Sint = VK_FORMAT_R8G8B8_SINT,
  R8G8B8Srgb = VK_FORMAT_R8G8B8_SRGB,
  B8G8R8Unorm = VK_FORMAT_B8G8R8_UNORM,
  B8G8R8Snorm = VK_FORMAT_B8G8R8_SNORM,
  B8G8R8Uscaled = VK_FORMAT_B8G8R8_USCALED,
  B8G8R8Sscaled = VK_FORMAT_B8G8R8_SSCALED,
  B8G8R8Uint = VK_FORMAT_B8G8R8_UINT,
  B8G8R8Sint = VK_FORMAT_B8G8R8_SINT,
  B8G8R8Srgb = VK_FORMAT_B8G8R8_SRGB,
  R8G8B8A8Unorm = VK_FORMAT_R8G8B8A8_UNORM,
  R8G8B8A8Snorm = VK_FORMAT_R8G8B8A8_SNORM,
  R8G8B8A8Uscaled = VK_FORMAT_R8G8B8A8_USCALED,
  R8G8B8A8Sscaled = VK_FORMAT_R8G8B8A8_SSCALED,
  R8G8B8A8Uint = VK_FORMAT_R8G8B8A8_UINT,
  R8G8B8A8Sint = VK_FORMAT_R8G8B8A8_SINT,
  R8G8B8A8Srgb = VK_FORMAT_R8G8B8A8_SRGB,
  B8G8R8A8Unorm = VK_FORMAT_B8G8R8A8_UNORM,
  B8G8R8A8Snorm = VK_FORMAT_B8G8R8A8_SNORM,
  B8G8R8A8Uscaled = VK_FORMAT_B8G8R8A8_USCALED,
  B8G8R8A8Sscaled = VK_FORMAT_B8G8R8A8_SSCALED,
  B8G8R8A8Uint = VK_FORMAT_B8G8R8A8_UINT,
  B8G8R8A8Sint = VK_FORMAT_B8G8R8A8_SINT,
  B8G8R8A8Srgb = VK_FORMAT_B8G8R8A8_SRGB,
  A8B8G8R8UnormPack32 = VK_FORMAT_A8B8G8R8_UNORM_PACK32,
  A8B8G8R8SnormPack32 = VK_FORMAT_A8B8G8R8_SNORM_PACK32,
  A8B8G8R8UscaledPack32 = VK_FORMAT_A8B8G8R8_USCALED_PACK32,
  A8B8G8R8SscaledPack32 = VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
  A8B8G8R8UintPack32 = VK_FORMAT_A8B8G8R8_UINT_PACK32,
  A8B8G8R8SintPack32 = VK_FORMAT_A8B8G8R8_SINT_PACK32,
  A8B8G8R8SrgbPack32 = VK_FORMAT_A8B8G8R8_SRGB_PACK32,
  A2R10G10B10UnormPack32 = VK_FORMAT_A2R10G10B10_UNORM_PACK32,
  A2R10G10B10SnormPack32 = VK_FORMAT_A2R10G10B10_SNORM_PACK32,
  A2R10G10B10UscaledPack32 = VK_FORMAT_A2R10G10B10_USCALED_PACK32,
  A2R10G10B10SscaledPack32 = VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
  A2R10G10B10UintPack32 = VK_FORMAT_A2R10G10B10_UINT_PACK32,
  A2R10G10B10SintPack32 = VK_FORMAT_A2R10G10B10_SINT_PACK32,
  A2B10G10R10UnormPack32 = VK_FORMAT_A2B10G10R10_UNORM_PACK32,
  A2B10G10R10SnormPack32 = VK_FORMAT_A2B10G10R10_SNORM_PACK32,
  A2B10G10R10UscaledPack32 = VK_FORMAT_A2B10G10R10_USCALED_PACK32,
  A2B10G10R10SscaledPack32 = VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
  A2B10G10R10UintPack32 = VK_FORMAT_A2B10G10R10_UINT_PACK32,
  A2B10G10R10SintPack32 = VK_FORMAT_A2B10G10R10_SINT_PACK32,
  R16Unorm = VK_FORMAT_R16_UNORM,
  R16Snorm = VK_FORMAT_R16_SNORM,
  R16Uscaled = VK_FORMAT_R16_USCALED,
  R16Sscaled = VK_FORMAT_R16_SSCALED,
  R16Uint = VK_FORMAT_R16_UINT,
  R16Sint = VK_FORMAT_R16_SINT,
  R16Sfloat = VK_FORMAT_R16_SFLOAT,
  R16G16Unorm = VK_FORMAT_R16G16_UNORM,
  R16G16Snorm = VK_FORMAT_R16G16_SNORM,
  R16G16Uscaled = VK_FORMAT_R16G16_USCALED,
  R16G16Sscaled = VK_FORMAT_R16G16_SSCALED,
  R16G16Uint = VK_FORMAT_R16G16_UINT,
  R16G16Sint = VK_FORMAT_R16G16_SINT,
  R16G16Sfloat = VK_FORMAT_R16G16_SFLOAT,
  R16G16B16Unorm = VK_FORMAT_R16G16B16_UNORM,
  R16G16B16Snorm = VK_FORMAT_R16G16B16_SNORM,
  R16G16B16Uscaled = VK_FORMAT_R16G16B16_USCALED,
  R16G16B16Sscaled = VK_FORMAT_R16G16B16_SSCALED,
  R16G16B16Uint = VK_FORMAT_R16G16B16_UINT,
  R16G16B16Sint = VK_FORMAT_R16G16B16_SINT,
  R16G16B16Sfloat = VK_FORMAT_R16G16B16_SFLOAT,
  R16G16B16A16Unorm = VK_FORMAT_R16G16B16A16_UNORM,
  R16G16B16A16Snorm = VK_FORMAT_R16G16B16A16_SNORM,
  R16G16B16A16Uscaled = VK_FORMAT_R16G16B16A16_USCALED,
  R16G16B16A16Sscaled = VK_FORMAT_R16G16B16A16_SSCALED,
  R16G16B16A16Uint = VK_FORMAT_R16G16B16A16_UINT,
  R16G16B16A16Sint = VK_FORMAT_R16G16B16A16_SINT,
  R16G16B16A16Sfloat = VK_FORMAT_R16G16B16A16_SFLOAT,
  R32Uint = VK_FORMAT_R32_UINT,
  R32Sint = VK_FORMAT_R32_SINT,
  R32Sfloat = VK_FORMAT_R32_SFLOAT,
  R32G32Uint = VK_FORMAT_R32G32_UINT,
  R32G32Sint = VK_FORMAT_R32G32_SINT,
  R32G32Sfloat = VK_FORMAT_R32G32_SFLOAT,
  R32G32B32Uint = VK_FORMAT_R32G32B32_UINT,
  R32G32B32Sint = VK_FORMAT_R32G32B32_SINT,
  R32G32B32Sfloat = VK_FORMAT_R32G32B32_SFLOAT,
  R32G32B32A32Uint = VK_FORMAT_R32G32B32A32_UINT,
  R32G32B32A32Sint = VK_FORMAT_R32G32B32A32_SINT,
  R32G32B32A32Sfloat = VK_FORMAT_R32G32B32A32_SFLOAT,
  R64Uint = VK_FORMAT_R64_UINT,
  R64Sint = VK_FORMAT_R64_SINT,
  R64Sfloat = VK_FORMAT_R64_SFLOAT,
  R64G64Uint = VK_FORMAT_R64G64_UINT,
  R64G64Sint = VK_FORMAT_R64G64_SINT,
  R64G64Sfloat = VK_FORMAT_R64G64_SFLOAT,
  R64G64B64Uint = VK_FORMAT_R64G64B64_UINT,
  R64G64B64Sint = VK_FORMAT_R64G64B64_SINT,
  R64G64B64Sfloat = VK_FORMAT_R64G64B64_SFLOAT,
  R64G64B64A64Uint = VK_FORMAT_R64G64B64A64_UINT,
  R64G64B64A64Sint = VK_FORMAT_R64G64B64A64_SINT,
  R64G64B64A64Sfloat = VK_FORMAT_R64G64B64A64_SFLOAT,
  B10G11R11UfloatPack32 = VK_FORMAT_B10G11R11_UFLOAT_PACK32,
  E5B9G9R9UfloatPack32 = VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
  D16Unorm = VK_FORMAT_D16_UNORM,
  X8D24UnormPack32 = VK_FORMAT_X8_D24_UNORM_PACK32,
  D32Sfloat = VK_FORMAT_D32_SFLOAT,
  S8Uint = VK_FORMAT_S8_UINT,
  D16UnormS8Uint = VK_FORMAT_D16_UNORM_S8_UINT,
  D24UnormS8Uint = VK_FORMAT_D24_UNORM_S8_UINT,
  D32SfloatS8Uint = VK_FORMAT_D32_SFLOAT_S8_UINT,
  Bc1RgbUnormBlock = VK_FORMAT_BC1_RGB_UNORM_BLOCK,
  Bc1RgbSrgbBlock = VK_FORMAT_BC1_RGB_SRGB_BLOCK,
  Bc1RgbaUnormBlock = VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
  Bc1RgbaSrgbBlock = VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
  Bc2UnormBlock = VK_FORMAT_BC2_UNORM_BLOCK,
  Bc2SrgbBlock = VK_FORMAT_BC2_SRGB_BLOCK,
  Bc3UnormBlock = VK_FORMAT_BC3_UNORM_BLOCK,
  Bc3SrgbBlock = VK_FORMAT_BC3_SRGB_BLOCK,
  Bc4UnormBlock = VK_FORMAT_BC4_UNORM_BLOCK,
  Bc4SnormBlock = VK_FORMAT_BC4_SNORM_BLOCK,
  Bc5UnormBlock = VK_FORMAT_BC5_UNORM_BLOCK,
  Bc5SnormBlock = VK_FORMAT_BC5_SNORM_BLOCK,
  Bc6HUfloatBlock = VK_FORMAT_BC6H_UFLOAT_BLOCK,
  Bc6HSfloatBlock = VK_FORMAT_BC6H_SFLOAT_BLOCK,
  Bc7UnormBlock = VK_FORMAT_BC7_UNORM_BLOCK,
  Bc7SrgbBlock = VK_FORMAT_BC7_SRGB_BLOCK,
  Etc2R8G8B8UnormBlock = VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
  Etc2R8G8B8SrgbBlock = VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
  Etc2R8G8B8A1UnormBlock = VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
  Etc2R8G8B8A1SrgbBlock = VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,
  Etc2R8G8B8A8UnormBlock = VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
  Etc2R8G8B8A8SrgbBlock = VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
  EacR11UnormBlock = VK_FORMAT_EAC_R11_UNORM_BLOCK,
  EacR11SnormBlock = VK_FORMAT_EAC_R11_SNORM_BLOCK,
  EacR11G11UnormBlock = VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
  EacR11G11SnormBlock = VK_FORMAT_EAC_R11G11_SNORM_BLOCK,
  Astc4x4UnormBlock = VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
  Astc4x4SrgbBlock = VK_FORMAT_ASTC_4x4_SRGB_BLOCK,
  Astc5x4UnormBlock = VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
  Astc5x4SrgbBlock = VK_FORMAT_ASTC_5x4_SRGB_BLOCK,
  Astc5x5UnormBlock = VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
  Astc5x5SrgbBlock = VK_FORMAT_ASTC_5x5_SRGB_BLOCK,
  Astc6x5UnormBlock = VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
  Astc6x5SrgbBlock = VK_FORMAT_ASTC_6x5_SRGB_BLOCK,
  Astc6x6UnormBlock = VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
  Astc6x6SrgbBlock = VK_FORMAT_ASTC_6x6_SRGB_BLOCK,
  Astc8x5UnormBlock = VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
  Astc8x5SrgbBlock = VK_FORMAT_ASTC_8x5_SRGB_BLOCK,
  Astc8x6UnormBlock = VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
  Astc8x6SrgbBlock = VK_FORMAT_ASTC_8x6_SRGB_BLOCK,
  Astc8x8UnormBlock = VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
  Astc8x8SrgbBlock = VK_FORMAT_ASTC_8x8_SRGB_BLOCK,
  Astc10x5UnormBlock = VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
  Astc10x5SrgbBlock = VK_FORMAT_ASTC_10x5_SRGB_BLOCK,
  Astc10x6UnormBlock = VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
  Astc10x6SrgbBlock = VK_FORMAT_ASTC_10x6_SRGB_BLOCK,
  Astc10x8UnormBlock = VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
  Astc10x8SrgbBlock = VK_FORMAT_ASTC_10x8_SRGB_BLOCK,
  Astc10x10UnormBlock = VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
  Astc10x10SrgbBlock = VK_FORMAT_ASTC_10x10_SRGB_BLOCK,
  Astc12x10UnormBlock = VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
  Astc12x10SrgbBlock = VK_FORMAT_ASTC_12x10_SRGB_BLOCK,
  Astc12x12UnormBlock = VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
  Astc12x12SrgbBlock = VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
  G8B8G8R8422Unorm = VK_FORMAT_G8B8G8R8_422_UNORM,
  G8B8G8R8422UnormKHR = VK_FORMAT_G8B8G8R8_422_UNORM_KHR,
  B8G8R8G8422Unorm = VK_FORMAT_B8G8R8G8_422_UNORM,
  B8G8R8G8422UnormKHR = VK_FORMAT_B8G8R8G8_422_UNORM_KHR,
  G8B8R83Plane420Unorm = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
  G8B8R83Plane420UnormKHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR,
  G8B8R82Plane420Unorm = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
  G8B8R82Plane420UnormKHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR,
  G8B8R83Plane422Unorm = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
  G8B8R83Plane422UnormKHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR,
  G8B8R82Plane422Unorm = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
  G8B8R82Plane422UnormKHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR,
  G8B8R83Plane444Unorm = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
  G8B8R83Plane444UnormKHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR,
  R10X6UnormPack16 = VK_FORMAT_R10X6_UNORM_PACK16,
  R10X6UnormPack16KHR = VK_FORMAT_R10X6_UNORM_PACK16_KHR,
  R10X6G10X6Unorm2Pack16 = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
  R10X6G10X6Unorm2Pack16KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR,
  R10X6G10X6B10X6A10X6Unorm4Pack16 = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
  R10X6G10X6B10X6A10X6Unorm4Pack16KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR,
  G10X6B10X6G10X6R10X6422Unorm4Pack16 = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
  G10X6B10X6G10X6R10X6422Unorm4Pack16KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR,
  B10X6G10X6R10X6G10X6422Unorm4Pack16 = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
  B10X6G10X6R10X6G10X6422Unorm4Pack16KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR,
  G10X6B10X6R10X63Plane420Unorm3Pack16 = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
  G10X6B10X6R10X63Plane420Unorm3Pack16KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR,
  G10X6B10X6R10X62Plane420Unorm3Pack16 = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
  G10X6B10X6R10X62Plane420Unorm3Pack16KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR,
  G10X6B10X6R10X63Plane422Unorm3Pack16 = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
  G10X6B10X6R10X63Plane422Unorm3Pack16KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR,
  G10X6B10X6R10X62Plane422Unorm3Pack16 = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
  G10X6B10X6R10X62Plane422Unorm3Pack16KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR,
  G10X6B10X6R10X63Plane444Unorm3Pack16 = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
  G10X6B10X6R10X63Plane444Unorm3Pack16KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR,
  R12X4UnormPack16 = VK_FORMAT_R12X4_UNORM_PACK16,
  R12X4UnormPack16KHR = VK_FORMAT_R12X4_UNORM_PACK16_KHR,
  R12X4G12X4Unorm2Pack16 = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
  R12X4G12X4Unorm2Pack16KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR,
  R12X4G12X4B12X4A12X4Unorm4Pack16 = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
  R12X4G12X4B12X4A12X4Unorm4Pack16KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR,
  G12X4B12X4G12X4R12X4422Unorm4Pack16 = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
  G12X4B12X4G12X4R12X4422Unorm4Pack16KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR,
  B12X4G12X4R12X4G12X4422Unorm4Pack16 = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
  B12X4G12X4R12X4G12X4422Unorm4Pack16KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR,
  G12X4B12X4R12X43Plane420Unorm3Pack16 = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
  G12X4B12X4R12X43Plane420Unorm3Pack16KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR,
  G12X4B12X4R12X42Plane420Unorm3Pack16 = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
  G12X4B12X4R12X42Plane420Unorm3Pack16KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR,
  G12X4B12X4R12X43Plane422Unorm3Pack16 = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
  G12X4B12X4R12X43Plane422Unorm3Pack16KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR,
  G12X4B12X4R12X42Plane422Unorm3Pack16 = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
  G12X4B12X4R12X42Plane422Unorm3Pack16KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR,
  G12X4B12X4R12X43Plane444Unorm3Pack16 = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
  G12X4B12X4R12X43Plane444Unorm3Pack16KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR,
  G16B16G16R16422Unorm = VK_FORMAT_G16B16G16R16_422_UNORM,
  G16B16G16R16422UnormKHR = VK_FORMAT_G16B16G16R16_422_UNORM_KHR,
  B16G16R16G16422Unorm = VK_FORMAT_B16G16R16G16_422_UNORM,
  B16G16R16G16422UnormKHR = VK_FORMAT_B16G16R16G16_422_UNORM_KHR,
  G16B16R163Plane420Unorm = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
  G16B16R163Plane420UnormKHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR,
  G16B16R162Plane420Unorm = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
  G16B16R162Plane420UnormKHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR,
  G16B16R163Plane422Unorm = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
  G16B16R163Plane422UnormKHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR,
  G16B16R162Plane422Unorm = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
  G16B16R162Plane422UnormKHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR,
  G16B16R163Plane444Unorm = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
  G16B16R163Plane444UnormKHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR,
  G8B8R82Plane444Unorm = VK_FORMAT_G8_B8R8_2PLANE_444_UNORM,
  G8B8R82Plane444UnormEXT = VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT,
  G10X6B10X6R10X62Plane444Unorm3Pack16 = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,
  G10X6B10X6R10X62Plane444Unorm3Pack16EXT = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT,
  G12X4B12X4R12X42Plane444Unorm3Pack16 = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,
  G12X4B12X4R12X42Plane444Unorm3Pack16EXT = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT,
  G16B16R162Plane444Unorm = VK_FORMAT_G16_B16R16_2PLANE_444_UNORM,
  G16B16R162Plane444UnormEXT = VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT,
  A4R4G4B4UnormPack16 = VK_FORMAT_A4R4G4B4_UNORM_PACK16,
  A4R4G4B4UnormPack16EXT = VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT,
  A4B4G4R4UnormPack16 = VK_FORMAT_A4B4G4R4_UNORM_PACK16,
  A4B4G4R4UnormPack16EXT = VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT,
  Astc4x4SfloatBlock = VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK,
  Astc4x4SfloatBlockEXT = VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT,
  Astc5x4SfloatBlock = VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK,
  Astc5x4SfloatBlockEXT = VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT,
  Astc5x5SfloatBlock = VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK,
  Astc5x5SfloatBlockEXT = VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT,
  Astc6x5SfloatBlock = VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK,
  Astc6x5SfloatBlockEXT = VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT,
  Astc6x6SfloatBlock = VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK,
  Astc6x6SfloatBlockEXT = VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT,
  Astc8x5SfloatBlock = VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK,
  Astc8x5SfloatBlockEXT = VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT,
  Astc8x6SfloatBlock = VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK,
  Astc8x6SfloatBlockEXT = VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT,
  Astc8x8SfloatBlock = VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK,
  Astc8x8SfloatBlockEXT = VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT,
  Astc10x5SfloatBlock = VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK,
  Astc10x5SfloatBlockEXT = VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT,
  Astc10x6SfloatBlock = VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK,
  Astc10x6SfloatBlockEXT = VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT,
  Astc10x8SfloatBlock = VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK,
  Astc10x8SfloatBlockEXT = VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT,
  Astc10x10SfloatBlock = VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK,
  Astc10x10SfloatBlockEXT = VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT,
  Astc12x10SfloatBlock = VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK,
  Astc12x10SfloatBlockEXT = VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT,
  Astc12x12SfloatBlock = VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK,
  Astc12x12SfloatBlockEXT = VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT,
  A1B5G5R5UnormPack16KHR = VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR,
  A8UnormKHR = VK_FORMAT_A8_UNORM_KHR,
  Pvrtc12BppUnormBlockIMG = VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG,
  Pvrtc14BppUnormBlockIMG = VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,
  Pvrtc22BppUnormBlockIMG = VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,
  Pvrtc24BppUnormBlockIMG = VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,
  Pvrtc12BppSrgbBlockIMG = VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,
  Pvrtc14BppSrgbBlockIMG = VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,
  Pvrtc22BppSrgbBlockIMG = VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,
  Pvrtc24BppSrgbBlockIMG = VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,
  R16G16Sfixed5NV = VK_FORMAT_R16G16_SFIXED5_NV,
  R16G16S105NV = VK_FORMAT_R16G16_S10_5_NV
};

template <BitTypeConcept BitType> class Flags {
public:
  using MaskType = typename std::underlying_type_t<BitType>;

  // constructors
  constexpr Flags() noexcept : mask{} {}

  constexpr Flags(BitType bit) noexcept : mask(static_cast<MaskType>(bit)) {}
  constexpr Flags(Flags<BitType> const& rhs) noexcept = default;

  constexpr explicit Flags(MaskType flags) noexcept : mask(flags) {}

  constexpr Flags<BitType> operator&(Flags<BitType> const& rhs) const noexcept {
    return Flags<BitType>(mask & rhs.mask);
  }

  constexpr Flags<BitType> operator|(Flags<BitType> const& rhs) const noexcept {
    return Flags<BitType>(mask | rhs.mask);
  }

  constexpr Flags<BitType> operator^(Flags<BitType> const& rhs) const noexcept {
    return Flags<BitType>(mask ^ rhs.mask);
  }

  // assignment operators
  constexpr Flags<BitType>& operator=(Flags<BitType> const& rhs) noexcept = default;

  constexpr Flags<BitType>& operator|=(Flags<BitType> const& rhs) noexcept {
    mask |= rhs.mask;
    return *this;
  }

  constexpr Flags<BitType>& operator&=(Flags<BitType> const& rhs) noexcept {
    mask &= rhs.mask;
    return *this;
  }

  constexpr Flags<BitType>& operator^=(Flags<BitType> const& rhs) noexcept {
    mask ^= rhs.mask;
    return *this;
  }

  // cast operators
  explicit constexpr operator bool() const noexcept {
    return !!mask;
  }

  explicit constexpr operator MaskType() const noexcept {
    return mask;
  }

private:
  MaskType mask;
};

// bitwise operators
template <BitTypeConcept BitType>
constexpr Flags<BitType> operator&(BitType bit, Flags<BitType> const& flags) noexcept {
  return flags.operator&(bit);
}

template <BitTypeConcept BitType> constexpr Flags<BitType> operator&(BitType lhs, BitType rhs) noexcept {
  return Flags<BitType>(lhs) & rhs;
}

enum class InstanceCreateFlagBits : VkInstanceCreateFlags {
  EnumeratePortabilityKHR = VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR
};

template <> struct FlagTraits<InstanceCreateFlagBits> {
  static constexpr bool is_bitmask = true;
};

using InstanceCreateFlags = Flags<InstanceCreateFlagBits>;

enum class PhysicalDeviceType {
  Other = VK_PHYSICAL_DEVICE_TYPE_OTHER,
  IntegratedGpu = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU,
  DiscreteGpu = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU,
  VirtualGpu = VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU,
  Cpu = VK_PHYSICAL_DEVICE_TYPE_CPU
};

// wrapper class for enum VkQueueFlagBits, see
// https://registry.khronos.org/vulkan/specs/latest/man/html/VkQueueFlagBits.html
enum class QueueFlagBits : VkQueueFlags {
  Graphics = VK_QUEUE_GRAPHICS_BIT,
  Compute = VK_QUEUE_COMPUTE_BIT,
  Transfer = VK_QUEUE_TRANSFER_BIT,
  SparseBinding = VK_QUEUE_SPARSE_BINDING_BIT,
  Protected = VK_QUEUE_PROTECTED_BIT,
  VideoDecodeKHR = VK_QUEUE_VIDEO_DECODE_BIT_KHR,
  VideoEncodeKHR = VK_QUEUE_VIDEO_ENCODE_BIT_KHR,
  OpticalFlowNV = VK_QUEUE_OPTICAL_FLOW_BIT_NV
};

template <> struct FlagTraits<QueueFlagBits> {
  static constexpr bool is_bitmask = true;
};

using QueueFlags = Flags<QueueFlagBits>;

constexpr bool operator&(QueueFlagBits lhs, VkQueueFlags rhs) {
  QueueFlags lhs_flags(lhs);
  QueueFlags rhs_flags(rhs);

  return static_cast<bool>(lhs_flags & rhs_flags);
}

constexpr bool operator&(VkQueueFlags lhs, QueueFlagBits rhs) {
  QueueFlags lhs_flags(lhs);
  QueueFlags rhs_flags(rhs);
  return static_cast<bool>(lhs_flags & rhs_flags);
}

enum class ImageUsageFlagBits : VkImageUsageFlags {
  TransferSrc = VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
  TransferDst = VK_IMAGE_USAGE_TRANSFER_DST_BIT,
  Sampled = VK_IMAGE_USAGE_SAMPLED_BIT,
  Storage = VK_IMAGE_USAGE_STORAGE_BIT,
  ColorAttachment = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
  DepthStencilAttachment = VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
  TransientAttachment = VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT,
  InputAttachment = VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT,
  HostTransferEXT = VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT,
  VideoDecodeDstKHR = VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR,
  VideoDecodeSrcKHR = VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR,
  VideoDecodeDpbKHR = VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR,
  FragmentDensityMapEXT = VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT,
  FragmentShadingRateAttachmentKHR = VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
  ShadingRateImageNV = VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV,
  VideoEncodeDstKHR = VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR,
  VideoEncodeSrcKHR = VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR,
  VideoEncodeDpbKHR = VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR,
  AttachmentFeedbackLoopEXT = VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT,
  InvocationMaskHUAWEI = VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI,
  SampleWeightQCOM = VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM,
  SampleBlockMatchQCOM = VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM,
};

template <> struct FlagTraits<ImageUsageFlagBits> {
  using wrapped_type = VkImageUsageFlags;
  static constexpr bool is_bitmask = true;
};

using ImageUsageFlags = Flags<ImageUsageFlagBits>;

enum class PresentMode {
  immediate = VK_PRESENT_MODE_IMMEDIATE_KHR,
  mailbox = VK_PRESENT_MODE_MAILBOX_KHR,
  fifo = VK_PRESENT_MODE_FIFO_KHR,
  fifo_relaxed = VK_PRESENT_MODE_FIFO_RELAXED_KHR,
  shared_demand_refresh = VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR,
  shared_continuos_refresh = VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR,
};

enum class CommandPoolCreateFlagBits : VkCommandPoolCreateFlags {
  transfer = VK_COMMAND_POOL_CREATE_TRANSIENT_BIT,
  reset_command_buffer = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT,
  protected_ = VK_COMMAND_POOL_CREATE_PROTECTED_BIT,
};

template <> struct FlagTraits<CommandPoolCreateFlagBits> {
  using wrapped_type = VkCommandPoolCreateFlagBits;
  static constexpr bool is_bitmask = true;
};

using CommandPoolCreateFlags = Flags<CommandPoolCreateFlagBits>;

enum class CommandBufferLevel {
  primary = VK_COMMAND_BUFFER_LEVEL_PRIMARY,
  secondary = VK_COMMAND_BUFFER_LEVEL_SECONDARY,
};

enum class ImageLayout {
  undefined = VK_IMAGE_LAYOUT_UNDEFINED,
  general = VK_IMAGE_LAYOUT_GENERAL,
  color_attachment_optimal = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
  depth_stencil_attachment_optimal = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
  dept_stencil_read_only_optimal = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
  shader_read_only_optimal = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
  transfer_src_optimal = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
  transfer_dst_optimal = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
  preinitialized = VK_IMAGE_LAYOUT_PREINITIALIZED,
  depth_read_only_stencil_attachment_optimal = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
  depth_attachment_stencil_read_only_optimal = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
  depth_attachment_optimal = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
  depth_read_only_optimal = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
  stencil_attachment_optimal = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
  stencil_read_only_optimal = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
  read_only_optimal = VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL,
  attachment_optimal = VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL,
  present_src_khr = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
  video_decode_dst_khr = VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR,
  video_decode_src_khr = VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR,
  video_decode_dpd_khr = VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR,
  shared_present_khr = VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR,
  fragment_density_map_optimal_ext = VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT,
  shading_rate_attachment_optimal_khr = VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
  rendering_local_read_khr = VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR,
  video_encode_dst_khr = VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR,
  video_endode_src_khr = VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR,
  video_encode_dpd_khr = VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR,
  feedback_loop_optimal_ext = VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT,
  depth_read_only_stencil_attachment_optimal_khr = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR,
  depth_attachment_stencil_read_only_optimal_khr = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR,
  shading_rate_optimal_nv = VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV,
  depth_attachment_optimal_khr = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR,
  depth_read_only_optimal_khr = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR,
  stencil_attachment_optimal_khr = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR,
  stencil_read_only_optimal_khr = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR,
  read_only_optimal_khr = VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR,
  optimal = VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR
};

enum class AccessFlagBits : VkAccessFlags {
  indirect_command_read_bit = VK_ACCESS_INDIRECT_COMMAND_READ_BIT,
  index_read = VK_ACCESS_INDEX_READ_BIT,
  vertex_attribute_read_bit = VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT,
  uniform_read_bit = VK_ACCESS_UNIFORM_READ_BIT,
  input_attachment_bit = VK_ACCESS_INPUT_ATTACHMENT_READ_BIT,
  shader_read_bit = VK_ACCESS_SHADER_READ_BIT,
  shader_write_bit = VK_ACCESS_SHADER_WRITE_BIT,
  color_attachment_read_bit = VK_ACCESS_COLOR_ATTACHMENT_READ_BIT,
  attachment_write_bit = VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,
  depth_stencil_attachment_read_bit = VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,
  depth_stencil_attachment_write_bit = VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
  transfer_read_bit = VK_ACCESS_TRANSFER_READ_BIT,
  transfer_write_bit = VK_ACCESS_TRANSFER_WRITE_BIT,
  host_read_bit = VK_ACCESS_HOST_READ_BIT,
  host_write_bit = VK_ACCESS_HOST_WRITE_BIT,
  memory_read_bit = VK_ACCESS_MEMORY_READ_BIT,
  memory_write_bit = VK_ACCESS_MEMORY_WRITE_BIT,
  none_bit = VK_ACCESS_NONE,
  transform_feedback_write_bit = VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT,
  transform_feedback_counter_read_bit_ext = VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT,
  transform_deedback_counter_write_bit_ext = VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT,
  conditional_rendering_read_bit_ext = VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT,
  color_attachment_read_noncoherent_bit_ext = VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT,
  acceleration_structure_read_bit_bit_khr = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
  acceleration_structure_write_bit_khr = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
  fragment_density_map_read_bit_bit_ext = VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT,
  fragment_shading_rate_attachment_read_bit_khr = VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR,
  command_preprocess_read_bit_bit_nv = VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV,
  command_preprocess_write_bit_nv = VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV,
  shading_rate_image_read_bit_nv = VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV,
  acceleration_structure_read_bit_nv = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV,
  acceleration_structure_write_bit_nv = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV,
  access_none_bit_khr = VK_ACCESS_NONE_KHR,
  access_command_preprocess_read_bit_ext = VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT,
  command_preprocess_write_bit_ext = VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT,
};

template <> struct FlagTraits<AccessFlagBits> {
  static constexpr bool is_bitmask = true;
};

using AccessFlags = Flags<AccessFlagBits>;

enum class ImageAspectFlagBits : VkImageAspectFlags {
  color_bit = VK_IMAGE_ASPECT_COLOR_BIT,
  depth_bit = VK_IMAGE_ASPECT_DEPTH_BIT,
  stencil_bit = VK_IMAGE_ASPECT_STENCIL_BIT,
  metadata_bit = VK_IMAGE_ASPECT_METADATA_BIT,
  plane_0_bit = VK_IMAGE_ASPECT_PLANE_0_BIT,
  plane_1_bit = VK_IMAGE_ASPECT_PLANE_1_BIT,
  plane_2_bit = VK_IMAGE_ASPECT_PLANE_2_BIT,
  none = VK_IMAGE_ASPECT_NONE,
  memory_plane_0_bit_ext = VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT,
  memory_plane_1_bit_ext = VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT,
  memory_plane_2_bit_ext = VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT,
  memory_plane_3_bit_ext = VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT,
  plane_0_bit_khr = VK_IMAGE_ASPECT_PLANE_0_BIT_KHR,
  plane_1_bit_khr = VK_IMAGE_ASPECT_PLANE_1_BIT_KHR,
  plane_2_bit_khr = VK_IMAGE_ASPECT_PLANE_2_BIT_KHR,
  none_khr = VK_IMAGE_ASPECT_NONE_KHR,
};

template <> struct FlagTraits<ImageAspectFlagBits> {
  static constexpr bool is_bitmask = true;
};

using ImageAspectFlags = Flags<ImageAspectFlagBits>;

enum class FenceCreateFlagBits : VkFenceCreateFlags {
  signaled = VK_FENCE_CREATE_SIGNALED_BIT,
};

template <> struct FlagTraits<FenceCreateFlagBits> {
  static constexpr bool is_bitmask = true;
};

using FenceCreateFlags = Flags<FenceCreateFlagBits>;

} // namespace vkh